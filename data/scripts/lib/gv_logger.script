
// _misc_ParserGetOrCreateByKey
//
function _misc_ParserGetOrCreateByKey(name : String; bClear : Boolean) : Integer;
begin
   var p : Integer = ParserSelectByKey(gc_ParsersRoot);

   if p=0 then
      p := ParserCreate(gc_ParsersRoot);

   Result := ParserSelectByHandleByKey(p,name);

   if (Result=0) then
      Result := ParserAddChildByIndex(p,name)
   else
   begin
      if (bClear) then
         ParserClearByHandle(Result);
   end;
end;

// check gBooleRegister_GVLogging variable to control log output
procedure _gv_InitLogging();
begin
   gArr_GvLogModuleNames[0] := 'MapTurnFinished';
   gArr_GvLogModuleNames[1] := 'BattleLockCount';
   gArr_GvLogModuleNames[2] := 'ShardLockCount';
   gArr_GvLogModuleNames[3] := 'AstralLockCount';
   gArr_GvLogModuleNames[4] := 'MapCurrentPlayer';
   gArr_GvLogModuleNames[10] := 'IO_Handle';

   gArr_GvLogModuleNames[16] := 'GUI';
   gArr_GvLogModuleNames[17] := 'MAP';
   gArr_GvLogModuleNames[18] := 'OBJ';
   gArr_GvLogModuleNames[19] := 'QUE';
   gArr_GvLogModuleNames[20] := 'ASL';
   gArr_GvLogModuleNames[23] := 'MSC';

   gArr_GvLogModuleNames[32] := 'UNKNOWN';
   gArr_GvLogModuleNames[33] := '                                                                                                        ';

   gIntRegister_GvLogIdentLevel := 0;
end;

procedure LogI(log_text : String);
begin
   Log(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+log_text);
end;

procedure ErrorLogI(log_text : String);
begin
   if (gIntRegister_GVLogging <> gc_gvlog_log_none) then
   begin
      var p : Integer = _misc_ParserGetOrCreateByKey('ErrorLog',false);
      var idx,t : Integer;
      var k : String;

      t := Round(GetCurrentTime()*100);
      idx := 0;
      k :=IntToStr(t)+'_'+IntToStr(idx);
      while ParserGetValueByKeyByHandle(p,k) <> '' do
      begin
         idx := idx + 1;
         k :=IntToStr(t)+'_'+IntToStr(idx);
      end;
      ParserSetValueByKeyByHandle(p,k,log_text);
      ParserSaveToFileByHandle(p,'.\log\errors\'+gStringRegister_LogLanParserPfx+'_errors.dat');
   end;
   ErrorLog(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+'['+IntToStr(Round(GetCurrentTime()*100))+'] '+log_text);
end;

procedure _log_Gui(log_data : String);
begin
   Log(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+'[GUI] '+log_data);
end;

procedure _log_Lan(log_data : String);
begin
   Log(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+'[LAN] '+log_data);
end;

procedure _log_Map(log_data : String);
begin
   Log(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+'[MAP] '+log_data);
end;

procedure _log_Obj(log_data : String);
begin
   Log(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+'[OBJ] '+log_data);
end;

// if value is 0x10000 then stop
procedure _log_ValuesExt(_section,text : String; value1,value2,value3,value4,value5,value6 : Integer);
begin
   var delimiterStringCount : Integer = _sa_GetNum(text);
   var v : array [0..6] of Integer;
   var s : array [0..6] of String;
   var i : Integer;
   var cs, result_str : String;

   v[0]:=value1;
   v[1]:=value2;
   v[2]:=value3;
   v[3]:=value4;
   v[4]:=value5;
   v[5]:=value6;
   s[0]:='';
   s[1]:='';
   s[2]:='';
   s[3]:='';
   s[4]:='';
   s[5]:='';
   s[6]:='';

   result_str := '['+_section+']';

   for i := 0 to delimiterStringCount-1 do
   begin
      if (i = 6) or (v[i] = $10000) then
         break;

      _sa_Get(text,i,cs);
      if cs = '' then
         s[i] := IntToStr(i)
      else
         s[i] := cs;

      if i = 0 then
         result_str := result_str+' '
      else
         result_str := result_str+', ';
      result_str := result_str+s[i]+': '+IntToStr(v[i]);
   end;

   Log(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+result_str);
end;

procedure _log_Values(text : String; value1,value2,value3,value4,value5,value6 : Integer);
begin
   _log_ValuesExt('GUI',text,value1,value2,value3,value4,value5,value6);
end;

procedure _log_ValuesL(text : String; value1,value2,value3,value4,value5,value6 : Integer);
begin
   _log_ValuesExt('LAN',text,value1,value2,value3,value4,value5,value6);
end;

procedure _log_ValuesM(text : String; value1,value2,value3,value4,value5,value6 : Integer);
begin
   _log_ValuesExt('MAP',text,value1,value2,value3,value4,value5,value6);
end;

function Assert(condition : Boolean; text : String) : Boolean;
begin
   if not condition then
      ErrorLog(SubStr(gArr_GvLogModuleNames[33],1,gc_gvlog_ident_width*gIntRegister_GvLogIdentLevel)+'ASSERT: '+text);
   Result := condition;
end;

function _gv_GetMapTurnFinished () : Boolean;
begin
   Result := gBoolRegister_MapTurnFinished;
end;

function _gv_SetMapTurnFinished(new_value : Boolean;state_name : String) : Boolean;
begin
   if ((gIntRegister_GVLogging and gc_gvlog_mapturnfinished) <> 0) then
   begin
      var snm : String;

      if state_name = '' then snm := gArr_GvLogModuleNames[32]
      else snm := state_name;

      LogI('[GV] '+gArr_GvLogModuleNames[0]+' set to '+BoolToStr(new_value)+' from '+BoolToStr(gBoolRegister_MapTurnFinished)+'. State: '+snm);
   end;

   gBoolRegister_MapTurnFinished := new_value;
   Result := gBoolRegister_MapTurnFinished;
end;

function _gv_GetBattleLock() : Integer;
begin
   Result := gIntRegister_BattleLockCount;
end;

function _gv_GetBattleLockLastChangeTime() : Float;
begin
   Result := gFloatRegister_BattleLockTime;
end;

// &0x10000 - set absolute value
function _gv_SetBattleLock(delta_value : Integer; state_name : String) : Integer;
begin
   var absolute : Boolean;

   gFloatRegister_BattleLockTime := GetCurrentTime();
   if (delta_value > $ffff) then
   begin
      absolute := true;
      delta_value := delta_value and $ffff;
   end
   else
      absolute := false;

   if ((gIntRegister_GVLogging and gc_gvlog_battlemaplock) <> 0) then
   begin
      var snm,pnm : String;

      if state_name = '' then snm := gArr_GvLogModuleNames[32]
      else snm := state_name;

      if absolute then pnm := 'set to'
      else pnm := 'adjusted on';

      LogI('[GV] '+gArr_GvLogModuleNames[1]+' is '+pnm+' '+IntToStr(delta_value)+' from '+IntToStr(gIntRegister_BattleLockCount)+'. State: '+snm);
   end;

   if absolute then gIntRegister_BattleLockCount := delta_value
   else gIntRegister_BattleLockCount := gIntRegister_BattleLockCount + delta_value;

   if gIntRegister_BattleLockCount < 0 then
   begin
      ErrorLog('[GV] '+gArr_GvLogModuleNames[1]+' is < 0. Adjusted on '+IntToStr(delta_value)+' from '+IntToStr(gIntRegister_BattleLockCount-delta_value)+'. State: '+state_name);
      gIntRegister_BattleLockCount := 0;
   end;
   Result := gIntRegister_BattleLockCount;
end;

function _gv_GetMapLock() : Integer;
begin
   Result := gIntRegister_MapLockCount;
end;

// &0x10000 - set absolute value
function _gv_SetMapLock(delta_value : Integer; state_name : String) : Integer;
begin
   var absolute : Boolean;

   if (delta_value > $ffff) then
   begin
      absolute := true;
      delta_value := delta_value and $ffff;
   end
   else
      absolute := false;

   if ((gIntRegister_GVLogging and gc_gvlog_shardmaplock) <> 0) then
   begin
      var snm,pnm : String;

      if state_name = '' then snm := gArr_GvLogModuleNames[32]
      else snm := state_name;

      if absolute then pnm := 'set to'
      else pnm := 'adjusted on';

      LogI('[GV] '+gArr_GvLogModuleNames[2]+' is '+pnm+' '+IntToStr(delta_value)+' from '+IntToStr(gIntRegister_MapLockCount)+'. State: '+snm);
   end;

   if absolute then gIntRegister_MapLockCount := delta_value
   else gIntRegister_MapLockCount := gIntRegister_MapLockCount + delta_value;

   if gIntRegister_MapLockCount < 0 then
   begin
      ErrorLog('[GV] '+gArr_GvLogModuleNames[2]+' is < 0. Adjusted on '+IntToStr(delta_value)+' from '+IntToStr(gIntRegister_MapLockCount)+'. State: '+state_name);
      gIntRegister_MapLockCount := 0;
   end;
   Result := gIntRegister_MapLockCount;
end;

function _gv_GetAstralLock() : Integer;
begin
   Result := gIntRegister_AstralLockCount;
end;

// &0x10000 - set absolute value
function _gv_SetAstralLock(delta_value : Integer; state_name : String) : Integer;
begin
   var absolute : Boolean;

   if (delta_value > $ffff) then
   begin
      absolute := true;
      delta_value := delta_value and $ffff;
   end
   else
      absolute := false;

   if ((gIntRegister_GVLogging and gc_gvlog_astrallock) <> 0) then
   begin
      var snm,pnm : String;

      if state_name = '' then snm := gArr_GvLogModuleNames[32]
      else snm := state_name;

      if absolute then pnm := 'set to'
      else pnm := 'adjusted on';

      LogI('[GV] '+gArr_GvLogModuleNames[3]+' is '+pnm+' '+IntToStr(delta_value)+' from '+IntToStr(gIntRegister_AstralLockCount)+'. State: '+snm);
   end;

   if absolute then gIntRegister_AstralLockCount := delta_value
   else gIntRegister_AstralLockCount := gIntRegister_AstralLockCount + delta_value;

   if gIntRegister_AstralLockCount < 0 then
   begin
      ErrorLog('[GV] '+gArr_GvLogModuleNames[3]+' is < 0. Adjusted on '+IntToStr(delta_value)+' from '+IntToStr(gIntRegister_AstralLockCount)+'. State: '+state_name);
      gIntRegister_AstralLockCount := 0;
   end;
   Result := gIntRegister_AstralLockCount;
end;

function _gv_GetCurrentPlayer() : Integer;
begin
   Result := gIntRegister_MapCurPlayerIndex;
end;

function _gv_GetCurrentPlayerHandle() : Integer;
begin
   if gIntRegister_MapCurPlayerIndex >= 0 then
      Result := GetPlayerHandleByIndex(gIntRegister_MapCurPlayerIndex)
   else
      Result := 0;
end;

// -1 - reset cycle
function _gv_SetCurrentPlayer(new_idx : Integer; state_name : String) : Integer;
begin
   var ph,old_idx,new_ph : Integer;

   old_idx := gIntRegister_MapCurPlayerIndex;
   if (old_idx >= 0) and (old_idx <> new_idx) and ((gIntRegister_CurGameMode = gc_GameModeStrategy) or (gIntRegister_CurGameMode = gc_GameModeTactics)) then
   begin
      ph := GetPlayerHandleByIndex(old_idx);
      if ph > 0 then
      begin
         IntRegister0 := new_idx;
         BoolRegister0 := false;
         PlayerExecuteStateByHandle(ph, 'CurrentPlayerChanged');
      end;
   end;

   gIntRegister_MapCurPlayerIndex := new_idx;

   if (new_idx >= 0) and (old_idx <> new_idx) and ((gIntRegister_CurGameMode = gc_GameModeStrategy) or (gIntRegister_CurGameMode = gc_GameModeTactics)) then
   begin
      new_ph := GetPlayerHandleByIndex(new_idx);
      if new_ph > 0 then
      begin
         IntRegister0 := old_idx;
         BoolRegister0 := true;
         PlayerExecuteStateByHandle(new_ph, 'CurrentPlayerChanged');
      end;
   end;

   if ((gIntRegister_GVLogging and gc_gvlog_setcurrentplayer) <> 0) then
   begin
      var snm,onm,nnm : String;

      if state_name = '' then snm := gArr_GvLogModuleNames[32]
      else snm := state_name;

      if ph <> 0 then onm := GetPlayerNameByHandle(ph)
      else onm := '';

      if new_ph <> 0 then nnm := GetPlayerNameByHandle(new_ph)
      else nnm := '';

      LogI('[GV] '+gArr_GvLogModuleNames[4]+' switched from '+onm+'['+ IntToStr(old_idx)+'] to '+nnm+ '['+ IntToStr(new_idx)+']');
   end;

   if new_idx >= gGame.map.players then
   begin
      ErrorLogI('[GV] '+gArr_GvLogModuleNames[4]+' is more then max number of players ['+IntToStr(new_idx)+']. State: '+state_name);
   end;
   Result := new_idx;
end;

function _gv_GetIOHandle() : Integer;
begin
   Result := GetPlayerHandleInterfaceIO();
end;

function _gv_SetIOHandle(new_value : Integer;state_name : String) : Integer;
begin
   if ((gIntRegister_GVLogging and gc_gvlog_iohandle) <> 0) then
   begin
      var snm : String;

      if state_name = '' then snm := gArr_GvLogModuleNames[32]
      else snm := state_name;

      LogI('[GV] '+gArr_GvLogModuleNames[10]+' set for player '+GetPlayerNameByHandle(new_value)+' from '+GetPlayerNameByHandle(GetPlayerHandleInterfaceIO())+'. State: '+snm);
   end;

   SetPlayerHandleInterfaceIO(new_value);

   IntRegister0 := 0;
   IntRegister1 := new_value;
   MapExecuteState('vvk.RebuildGlobals');

   Result := GetPlayerHandleInterfaceIO();
end;

procedure _console_SetVar(v_name, v_val : String);
begin
   if gIntConsoleStateMachineHandle <> 0 then
      StateMachineSetValueByName(gIntConsoleStateMachineHandle,v_name,v_val);
end;

procedure _console_GetVar(v_name : String;var v_val : String);
begin
   var v : String;

   if gIntConsoleStateMachineHandle = 0 then
      v_val := ''
   else
   begin
      v := StateMachineGetValueByName(gIntConsoleStateMachineHandle,v_name);
      v_val := v;
   end;
end;

function _console_GetIntVar(v_name : String) : Integer;
begin
   if gIntConsoleStateMachineHandle = 0 then
      Result := 0
   else
      Result := StateMachineGetIntValueByName(gIntConsoleStateMachineHandle,v_name);
end;

procedure _console_ListVars(var v_val : String);
begin
   var v,cv,cn : String;
   var i,no : Integer;

   if gIntConsoleStateMachineHandle = 0 then
      no := 0
   else
      no := StateMachineGetVarsCount(gIntConsoleStateMachineHandle);
   v := '';

   for i := 0 to no-1 do
   begin
      cv := StateMachineGetValueByIndex(gIntConsoleStateMachineHandle,i);
      cn := StateMachineGetNameByIndex(gIntConsoleStateMachineHandle,i);

      v := v + cn + ' = '+ cv + gc_gui_BreakLine;
   end;
   v_val := v;
end;

procedure _gv_traceState(state_name : String; f : Integer);
begin
   if ((f and $ff) <> 0) and ((gIntRegister_GVLogging and gc_gvlog_statestrace_all) <> 0) then
   begin
      var t : Integer = (f and gc_gvlog_statestrace_all);
      var t1 : Integer = (gIntRegister_GVLogging and gc_gvlog_statestrace_all);

      if ((t and t1) <> 0) then
      begin
         var snm,pnm : String;
         var i : Integer;

         for i := 0 to 7 do
         begin
            if ((t and (1 shl (i+gc_gvlog_statestrace_shift))) <> 0) then
               break;
         end;

         if i <> 8 then
            i := i + gc_gvlog_statestrace_shift
         else
            i := 32;

         if state_name = '' then snm := gArr_GvLogModuleNames[32]
         else snm := state_name;

         if((f and $1000000) <> 0) then pnm := 'EXIT'
         else pnm := 'ENTER';

         if i > 32 then
         begin
            ErrorLogI('WRONG: '+ IntToStr(i));
            i := 32;
         end;

         if ((f and $1000000) <> 0) then gIntRegister_GvLogIdentLevel := max(gIntRegister_GvLogIdentLevel-1,0);
         LogI('[TRACE]['+gArr_GvLogModuleNames[i]+'] '+pnm+': '+state_name);
         if((f and $1000000) = 0) then gIntRegister_GvLogIdentLevel := gIntRegister_GvLogIdentLevel+1;
      end;
   end;
end;

function _query_GetExecutedHandle() : Integer;
begin
   Result := 0;
   if QueryMachineIsExecutedEvent() then
      Result := QueryMachineGetExecutedHandle();
end;

_gv_InitLogging();

